apply plugin: 'org.springframework.boot'

dependencies {
    compile project(":jlineup-core")
    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
    //this pulls spring context support to specified spring version because metrics lib in edison core is pulling it to 5.0.2
    compile("org.springframework:spring-context-support:${springVersion}")
    compile("de.otto.edison:edison-core:2.0.0-rc7") {
        exclude group: 'software.amazon.awssdk', module: "*"
    }

    testCompile project(path: ":jlineup-core", configuration: 'testCompile')
    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    testCompile("io.rest-assured:rest-assured:3.0.7")
    testCompile("org.awaitility:awaitility:3.1.0")

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"
}

tasks.distZip.enabled = false
tasks.distTar.enabled = false

tasks.bootDistZip {
    baseName = project.archivesBaseName
}

tasks.bootDistTar {
    baseName = project.archivesBaseName
}

test {
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}

jar {
    enabled = false
}

bootJar {
    enabled = true
    baseName = 'jlineup-web'
    mainClassName = "de.otto.jlineup.web.JLineupWebApplication"
    launchScript()
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from 'build/docs/javadoc'
    archiveClassifier = 'javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'jlineup-web'
            from components.java
            artifact sourcesJar
            artifact javadocJar
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'JLineup Web'
                description = 'The web variant of JLineup'
                url = 'https://github.com/otto-de/jlineup'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'MediaMarco'
                        name = 'Marco Geweke'
                        email = 'marco.geweke@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git@github.com:otto-de/jlineup.git'
                    developerConnection = 'scm:git@github.com:otto-de/jlineup.git'
                    url = 'https://github.com/otto-de/jlineup'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            if (project.debugUpload) {
                releasesRepoUrl = "$buildDir/repos/releases"
                snapshotsRepoUrl = "$buildDir/repos/snapshots"
            }
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = sonatypeUsername
                password = sonatypePassword
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}


javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}