import org.springframework.boot.gradle.tasks.bundling.BootJar

apply plugin: 'org.springframework.boot'

dependencies {
    implementation project(":jlineup-core")
    implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    implementation 'org.yaml:snakeyaml:2.3'
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
    implementation("de.otto.edison:edison-core:3.4.0")

    //Update hibernate validator that comes with edison-core
    implementation("org.hibernate.validator:hibernate-validator:8.0.2.Final")
    //Update commons-codec
    implementation("commons-codec:commons-codec:1.17.1")
    //Update embedded tomcat
    implementation("org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}")
    implementation("org.apache.tomcat.embed:tomcat-embed-el:${tomcatVersion}")
    implementation("org.apache.tomcat.embed:tomcat-embed-websocket:${tomcatVersion}")

    testImplementation "org.junit.jupiter:junit-jupiter:${junitJupiterVersion}"
    testCompileOnly 'junit:junit:4.13.2'
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${junitJupiterVersion}"
    testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    testImplementation('io.rest-assured:rest-assured:5.5.0')
    testImplementation("org.awaitility:awaitility:4.2.2")

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"


}

configurations {
    [apiElements, runtimeElements].each {
        it.outgoing.artifacts.removeIf {
            it.buildDependencies.getDependencies(null).contains(jar)
        }
        it.outgoing.artifact(bootJar)
    }
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.springframework.boot') {
            details.useVersion "${springBootVersion}"
            details.because 'Enforce spring boot version'
        }
        else if (details.requested.group == 'org.springframework') {
            details.useVersion "${springVersion}"
            details.because 'Enforce spring boot version'
        }
    }
}

configurations.all {
    exclude group: 'commons-logging', module: 'commons-logging'
}

tasks.distZip.enabled = false
tasks.distTar.enabled = false

tasks.bootDistZip {
    archiveBaseName = project.archivesBaseName
}

tasks.bootDistTar {
    archiveBaseName = project.archivesBaseName
}

test {
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}

jar {
    enabled = false
}

application {
    mainClass.set("de.otto.jlineup.web.JLineupWebApplication")
}

project(":jlineup-lambda") {
    sourceSets {
        main {
            configurations {
                //exclude group: 'commons-logging', module: 'commons-logging'
            }
        }

    }
}

task lambdaWebJar(type: BootJar) {
    enabled = true
    archiveBaseName = "jlineup-web-lambda"
    targetJavaVersion = JavaVersion.VERSION_17
    mainClass = "de.otto.jlineup.web.JLineupWebApplication"

    classpath = project(":jlineup-lambda").sourceSets.main.runtimeClasspath + sourceSets.main.runtimeClasspath
    launchScript()
}

bootJar {
    enabled = true
    mainClass = "de.otto.jlineup.web.JLineupWebApplication"
    dependsOn lambdaWebJar
    launchScript()
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from 'build/docs/javadoc'
    archiveClassifier = 'javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

project.afterEvaluate {
    tasks.withType(JavaCompile) {
        def version = sourceCompatibility
        project.logger.info("Configuring $name to use --release $version")
        println("Configuring $name to use --release $version")
        options.compilerArgs.addAll(['--release', version])
    }
}

publishing {
    publications {
        [ mavenJava(MavenPublication) {
            artifactId = 'jlineup-web'
            from components.java
            artifact sourcesJar
            artifact javadocJar
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'JLineup Web'
                description = 'The web variant of JLineup'
                url = 'https://github.com/otto-de/jlineup'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'MediaMarco'
                        name = 'Marco Geweke'
                        email = 'marco.geweke@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git@github.com:otto-de/jlineup.git'
                    developerConnection = 'scm:git@github.com:otto-de/jlineup.git'
                    url = 'https://github.com/otto-de/jlineup'
                }
            }
        },
        lambdaJava(MavenPublication) {
            artifact lambdaWebJar
            artifactId = 'jlineup-web-lambda'
            artifact sourcesJar
            artifact javadocJar
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'JLineup Web Lambda'
                description = 'The web variant of JLineup with AWS Lambda support'
                url = 'https://github.com/otto-de/jlineup'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'MediaMarco'
                        name = 'Marco Geweke'
                        email = 'marco.geweke@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git@github.com:otto-de/jlineup.git'
                    developerConnection = 'scm:git@github.com:otto-de/jlineup.git'
                    url = 'https://github.com/otto-de/jlineup'
                }
            }
        } ]
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            if (project.debugUpload) {
                releasesRepoUrl = "$layout.buildDir/repos/releases"
                snapshotsRepoUrl = "$layout.buildDir/repos/snapshots"
            } else {
                credentials {
                    username = sonatypeUsername
                    password = sonatypePassword
                }
            }
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    sign publishing.publications.mavenJava
    sign publishing.publications.lambdaJava
}

publishLambdaJavaPublicationToMavenRepository {
    dependsOn signMavenJavaPublication
    dependsOn signLambdaJavaPublication
}

publishMavenJavaPublicationToMavenRepository {
    dependsOn signMavenJavaPublication
    dependsOn signLambdaJavaPublication
}

publishLambdaJavaPublicationToMavenLocal {
    dependsOn signMavenJavaPublication
    dependsOn signLambdaJavaPublication
}

publishMavenJavaPublicationToMavenLocal {
    dependsOn signMavenJavaPublication
    dependsOn signLambdaJavaPublication
}