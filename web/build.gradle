import org.springframework.boot.gradle.tasks.bundling.BootJar

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

ext['selenium.version'] = "${seleniumVersion}"

dependencies {
    implementation project(":jlineup-core")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation 'org.yaml:snakeyaml:2.4'
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf")
    implementation("de.otto.edison:edison-core:3.5.4")
    implementation("io.micrometer:micrometer-registry-prometheus:1.15.3")

    //Update hibernate validator that comes with edison-core
    implementation("org.hibernate.validator:hibernate-validator:9.0.1.Final")
    //Update commons-codec
    implementation("commons-codec:commons-codec:1.19.0")
    //Update embedded tomcat
    implementation("org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}")
    implementation("org.apache.tomcat.embed:tomcat-embed-el:${tomcatVersion}")
    implementation("org.apache.tomcat.embed:tomcat-embed-websocket:${tomcatVersion}")

    testImplementation "org.junit.jupiter:junit-jupiter"
    testCompileOnly 'junit:junit'
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation('io.rest-assured:rest-assured:5.5.6')
    testImplementation("org.awaitility:awaitility:4.3.0")

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
}

//configurations.all {
//    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
//        if (details.requested.group == 'org.springframework.boot') {
//            details.useVersion "${springBootVersion}"
//            details.because 'Enforce spring boot version'
//        }
//        else if (details.requested.group == 'org.springframework') {
//            details.useVersion "${springVersion}"
//            details.because 'Enforce spring boot version'
//        }
//    }
//}

configurations.all {
    exclude group: 'commons-logging', module: 'commons-logging'
}

application {
    mainClass.set("de.otto.jlineup.web.JLineupWebApplication")
}

bootJar {
    mainClass = "de.otto.jlineup.web.JLineupWebApplication"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = "de.otto"
            artifactId = 'jlineup-web'
            from components.java
            pom {
                name = 'JLineup Web'
                description = 'The web variant of JLineup'
            }
        }
    }
}