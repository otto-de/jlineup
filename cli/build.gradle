plugins {
    id 'java-library'
}

apply plugin: 'org.springframework.boot'
//apply plugin: 'com.github.johnrengelman.shadow'

dependencies {
    implementation project(":jlineup-core")
    implementation "info.picocli:picocli:${picoCliVersion}"
    annotationProcessor "info.picocli:picocli-codegen:${picoCliVersion}"
    compileOnly "org.graalvm.nativeimage:svm:${graalvmVersion}"

    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine"
    testCompileOnly "junit:junit"
    testImplementation "org.hamcrest:hamcrest"
    testImplementation "org.junit.jupiter:junit-jupiter"
    testImplementation "org.mockito:mockito-core"
    testImplementation("com.github.stefanbirkner:system-rules:1.19.0") {
        exclude group: 'junit', module: 'junit-dep'
    }
}

//tasks.shadowJar {
//    mainClassName = "de.otto.jlineup.cli.Main"
//}

sourceCompatibility = JavaVersion.VERSION_17

project.afterEvaluate {
    tasks.withType(JavaCompile) {
        def version = sourceCompatibility
        project.logger.info("Configuring $name to use --release $version")
        println("Configuring $name to use --release $version")
        options.compilerArgs.addAll(['--release', version])
    }
}

bootJar {
    mainClass = "de.otto.jlineup.cli.Main"
}

application {
    mainClass.set("de.otto.jlineup.cli.Main")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = "de.otto"
            artifactId = 'jlineup-cli'
            from components.java

            pom {
                name = 'JLineup CLI'
                description = 'The cli version of JLineup'
            }
        }
    }
}