buildscript {
    ext {
        springBootVersion = '3.4.5'
        springVersion = '6.2.6'
        tomcatVersion = '10.1.42'
        seleniumVersion = '4.32.0'
        jacksonVersion = '2.19.1'
        nettyVersion = '4.2.2.Final'
        junitPlatformLauncherVersion = '1.12.2'
        junitJupiterVersion = '5.12.2'
        junitVintageVersion = '4.13.2'
        slf4jVersion = '2.0.17'
        logbackVersion = '1.5.18'
        graalvmVersion = '24.2.1'
        mockitoCoreVersion = '5.17.0'
        picoCliVersion = '4.7.7'
    }

    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'org.owasp:dependency-check-gradle:10.0.3'
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id 'org.jreleaser' version '1.18.0'
}

//
//\
///\
////\
def jlineup_version = "4.13.7"
/////
////
///
//

repositories {
    mavenCentral()
    mavenLocal()
}

apply plugin: 'java'
apply plugin: 'org.owasp.dependencycheck'

group = 'de.otto'
version = jlineup_version

jreleaser {
    project {
        snapshot {
            fullChangelog = true
        }
    }
    gitRootSearch = true
    signing {
        active = 'ALWAYS'
        armored = true
    }
    deploy {
        maven {
            github {
                app {
                    snapshotSupported = true
                    active = 'ALWAYS'
                    url = "https://maven.pkg.github.com/otto-de/jlineup"
                    stagingRepository('build/staging-deploy')
                }
            }
            mavenCentral {
                app {
                    snapshotSupported = false
                    active = 'ALWAYS'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    stagingRepository('build/staging-deploy')

                    // Time to wait between state transition checks, in seconds.
                    // Defaults to `10`.
                    //
                    retryDelay = 10

                    // Maximum number of attempts to verify state transition.
                    // Defaults to `60`.
                    // Maven Central release can currently take up to 20 minutes, so we increased this to 120
                    //
                    maxRetries = 120
                }
            }
        }
    }
}

dependencyCheck {
    nvd {
        apiKey = System.getenv("NVD_API_KEY")
    }
    failBuildOnCVSS = 4
    suppressionFiles = ["${rootDir}/dependency-check-suppressions.xml"]
}

subprojects {
    version = jlineup_version
    group = 'de.otto'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    task allDeps(type: DependencyReportTask) {}

    apply plugin: 'application'
    apply plugin: 'maven-publish'
    apply plugin: 'project-report'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'idea'

    tasks.distZip.enabled = false
    tasks.distTar.enabled = false

    tasks.bootDistZip {
        archiveBaseName = project.archivesBaseName
    }

    tasks.bootDistTar {
        archiveBaseName = project.archivesBaseName
    }

    if (project.name != 'jlineup-core') {
        bootJar {
            enabled = true
            //launchScript()
        }

        jar {
            enabled = true
        }

        configurations {
            [apiElements, runtimeElements].each {
                it.outgoing.artifact(bootJar)
            }
        }
    }

    jar {
        manifest {
            attributes(
                    provider: 'gradle',
                    'Implementation-Vendor': project.group,
                    'Implementation-Title': project.name,
                    'Implementation-Version': project.version
            )
        }
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    test {
        useJUnitPlatform()
        // To allow monitoring System.Exit() we need to allow security manager so it can be overridden in tests
        systemProperty("java.security.manager", "allow")
        testLogging {
            exceptionFormat = 'full'
            showStandardStreams = true
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                pom {
                    url = 'https://github.com/otto-de/jlineup'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'MediaMarco'
                            name = 'Marco Geweke'
                            email = 'marco.geweke@gmail.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:https://github.com/otto-de/jlineup.git'
                        developerConnection = 'scm:git:ssh://github.com/otto-de/jlineup.git'
                        url = 'https://github.com/otto-de/jlineup'
                    }
                }
            }
        }

        repositories {
            maven {
                // Our settingsDirectory is the project root dir.
                // We want to 'publish' to the specified dir to have the artifacts uploaded with JReleaser from that location afterwards.
                url = layout.settingsDirectory.dir('build/staging-deploy')
            }
        }
    }

    compileJava {
        options.compilerArgs.addAll(["-Aproject=${project.group}/${project.name}"])
    }

    targetCompatibility = JavaVersion.VERSION_17
    sourceCompatibility = JavaVersion.VERSION_17

    project.afterEvaluate {
        tasks.withType(JavaCompile) {
            def version = sourceCompatibility
            project.logger.info("Configuring $name to use --release $version")
            println("Configuring $name to use --release $version")
            options.compilerArgs.addAll(['--release', version])
        }
    }

}

static String runCommand(command) {
    Process proc = command.execute()
    def out = new StringBuffer()
    proc.consumeProcessOutputStream(out)
    proc.consumeProcessErrorStream(out)
    proc.waitFor()
    def errorlevel = proc.exitValue()
    if (errorlevel != 0) {
        throw new RuntimeException("exec failed on command: '${command}' with errorlevel ${errorlevel}".toString())
    }
    //System.err.println("Git Hash: " + out.toString().trim())
    out.toString().trim()
}
