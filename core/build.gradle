plugins {
    id 'java-library'
}

dependencies {
    implementation("org.seleniumhq.selenium:selenium-java") {
        exclude module: "selenium-edge-driver"
        exclude module: "selenium-ie-driver"
        exclude module: "selenium-opera-driver"
        exclude module: "htmlunit"
    }

    api "com.fasterxml.jackson.core:jackson-core"
    api "com.fasterxml.jackson.core:jackson-annotations"
    api "com.fasterxml.jackson.core:jackson-databind"
    api "com.fasterxml.jackson.datatype:jackson-datatype-jdk8"
    api "ch.qos.logback:logback-classic"
    api "com.google.guava:guava:33.5.0-jre"
    api "com.google.code.gson:gson"

    //Update netty (selenium has older version)
    implementation "io.netty:netty-codec"
    implementation "io.netty:netty-codec-http"
    implementation "io.netty:netty-codec-http2"
    implementation "io.netty:netty-handler"
    implementation "io.netty:netty-codec-socks"
    implementation "io.netty:netty-handler-proxy"
    implementation "io.netty:netty-transport-native-epoll"
    implementation "io.netty:netty-transport-native-kqueue"

    implementation 'org.apache.httpcomponents.client5:httpclient5'

    implementation "org.slf4j:slf4j-api"
    implementation "org.codehaus.janino:janino"
    implementation 'org.thymeleaf:thymeleaf'
    implementation "org.graalvm.sdk:graal-sdk:${graalvmVersion}"
    implementation "org.reflections:reflections:0.10.2"

    testRuntimeOnly "org.junit.platform:junit-platform-launcher"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine"
    testCompileOnly "junit:junit"
    testImplementation "org.junit.jupiter:junit-jupiter"
    testImplementation "org.hamcrest:hamcrest"
    testImplementation "org.mockito:mockito-core"
    testImplementation("com.github.stefanbirkner:system-rules:1.19.0") {
        exclude group: 'junit', module: 'junit-dep'
    }

    testImplementation("org.springframework.boot:spring-boot-starter-web")
    testImplementation("org.apache.tomcat.embed:tomcat-embed-core")
    testImplementation("org.apache.tomcat.embed:tomcat-embed-el")
    testImplementation("org.apache.tomcat.embed:tomcat-embed-websocket")
    testImplementation("org.springframework.boot:spring-boot-starter-thymeleaf")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
//        if (details.requested.group == 'com.fasterxml.jackson.core' && details.requested.name == 'jackson-databind') {
//            details.useVersion "2.13.3"
//            details.because 'Enforce databind version'
//        }
        if (details.requested.group == 'org.apache.httpcomponents') {
            details.useVersion "4.5.14"
        }
    }
}

application {
    mainClass.set("de.otto.jlineup.core.Main")
}

test {
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }
    maxHeapSize = "1024m"
}

tasks.processResources.doLast { task ->
    def resourcesDir = project.sourceSets.main.output.resourcesDir
    resourcesDir.mkdirs()

    def versionProperties = new File(resourcesDir, "version.properties")
    if (versionProperties) {
        def gitVersion = runCommand("git log -n1 --format=format:%H")
        def fullVersion = version
        versionProperties.text =
                "\njlineup.commit = ${gitVersion}\n" +
                        "\njlineup.version = ${fullVersion}\n" +
                        "\nedison.status.vcs.commit = ${gitVersion}\n" +
                        "\nedison.status.vcs.version = ${fullVersion}\n"

    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = "de.otto"
            artifactId = 'jlineup-core'
            from components.java
            pom {
                name = 'JLineup Core'
                description = 'The core module of JLineup'
            }
        }
    }
}
