def seleniumVersion = '3.141.59'
ext['selenium.version'] = seleniumVersion

dependencies {
    compile("org.seleniumhq.selenium:selenium-java:" + seleniumVersion) {
        exclude module: "selenium-edge-driver"
        exclude module: "selenium-ie-driver"
        exclude module: "selenium-opera-driver"
        exclude module: "selenium-safari-driver"
        exclude module: "htmlunit"
    }
    compile "io.github.bonigarcia:webdrivermanager:3.3.0"
    compile "com.codeborne:phantomjsdriver:1.4.4"
    compile "com.google.code.gson:gson:2.8.5"
    compile "com.fasterxml.jackson.core:jackson-databind:2.9.8"
    compile "ch.qos.logback:logback-classic:1.2.3"
    compile "org.codehaus.janino:janino:3.0.12"
    compile "org.thymeleaf:thymeleaf:3.0.11.RELEASE"
    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-core:2.23.4"
    testCompile "org.hamcrest:hamcrest-core:1.3"
    testCompile "org.hamcrest:hamcrest-library:1.3"
    testCompile "com.github.stefanbirkner:system-rules:1.19.0"

    testCompile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    testCompile("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
}

jar {
    enabled = true
    baseName = "jlineup-core"
}

test {
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    baseName = 'jlineup-core'
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    baseName = 'jlineup-core'
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives jar
}

[distZip, distTar].each { task ->
    configurations.archives.artifacts.removeAll
            { it.class.simpleName == "ArchivePublishArtifact" && it.archiveTask == task }
    task.enabled = false
}

signing {
    sign configurations.archives
}

tasks.processResources.doLast { task ->
    def resourcesDir = project.sourceSets.main.output.resourcesDir
    resourcesDir.mkdirs()

    def versionProperties = new File(resourcesDir, "version.properties")
    if (versionProperties) {
        def gitVersion = runCommand("git log -n1 --format=format:%H")
        def fullVersion = version
        versionProperties.text =
                "\njlineup.commit = ${gitVersion}\n" +
                "\njlineup.version = ${fullVersion}\n" +
                "\nedison.status.vcs.commit = ${gitVersion}\n" +
                "\nedison.status.vcs.version = ${fullVersion}\n"

    }
}

tasks.processResources.outputs.upToDateWhen{ false }

uploadArchives {
    configuration = configurations.archives
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            if (project.debugUpload) {
                // use this for local upload debugging instead of sonatype
                repository(url: "file://${buildDir}/repo")
                snapshotRepository(url: "file://${buildDir}/repo")
            } else {
                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }
            }

            pom.artifactId = "jlineup-core"
            pom.project {
                name 'JLineup Core'
                packaging 'jar'
                description 'Webapp image comparison tool'
                url 'http://github.com/otto-de/jlineup'

                scm {
                    url 'scm:git@github.com:otto-de/jlineup.git'
                    connection 'scm:git@github.com:otto-de/jlineup.git'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'mgeweke'
                        name 'Marco Geweke'
                        url 'https://github.com/MediaMarco'
                    }
                }
            }
        }
    }
}

static String runCommand(command) {
    Process proc = command.execute()
    def out = new StringBuffer()
    proc.consumeProcessOutputStream(out)
    proc.consumeProcessErrorStream(out)
    proc.waitFor()
    def errorlevel = proc.exitValue()
    if (errorlevel != 0) {
        throw new RuntimeException("exec failed on command: '${command}' with errorlevel ${errorlevel}".toString())
    }
    //System.err.println("Git Hash: " + out.toString().trim())
    out.toString().trim()
}
