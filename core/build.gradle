plugins {
    id 'java-library'
}

def seleniumVersion = '4.1.3'
def jacksonVersion = '2.13.2'
def nettyVersion = '4.1.76.Final'
ext['selenium.version'] = seleniumVersion
ext['jackson.version'] = jacksonVersion

dependencies {
    implementation("org.seleniumhq.selenium:selenium-java:" + seleniumVersion) {
        exclude module: "selenium-edge-driver"
        exclude module: "selenium-ie-driver"
        exclude module: "selenium-opera-driver"
        exclude module: "htmlunit"
    }

    api "com.google.guava:guava:31.1-jre"
    api 'com.google.code.gson:gson:2.9.0'

    //Update netty (selenium has older version)
    implementation "io.netty:netty-codec:" + nettyVersion
    implementation "io.netty:netty-codec-http:" + nettyVersion
    implementation "io.netty:netty-handler:" + nettyVersion
    implementation "io.netty:netty-codec-socks:" + nettyVersion
    implementation "io.netty:netty-handler-proxy:" + nettyVersion
    implementation "io.netty:netty-transport-native-epoll:" + nettyVersion
    implementation "io.netty:netty-transport-native-kqueue:" + nettyVersion

    implementation ("io.github.bonigarcia:webdrivermanager:5.1.1") {
        exclude group: "com.github.docker-java"
    }

    //Update commons-codec from 1.11 which has a vulnerability
    implementation "commons-codec:commons-codec:1.15"
    //Update jsoup (coming with webdrivermanager) (https://snyk.io/vuln/SNYK-JAVA-ORGJSOUP-1567345)
    implementation 'org.jsoup:jsoup:1.14.3'
    //Update commons compress (coming with webdrivermanager) (https://snyk.io/vuln/SNYK-JAVA-ORGAPACHECOMMONS-1316638)
    implementation "org.apache.commons:commons-compress:1.21"

    //Update commons io (webdrivermanager)
    implementation 'commons-io:commons-io:2.11.0'
    //Update bouncycastle (webdrivermanager)
    implementation 'org.bouncycastle:bcprov-jdk15on:1.70'

    api "com.fasterxml.jackson.core:jackson-core:" + jacksonVersion
    api "com.fasterxml.jackson.core:jackson-annotations:" + jacksonVersion
    api "com.fasterxml.jackson.core:jackson-databind:" + jacksonVersion + ".2" //Add micro patch level .2 because of CVE
    api "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:" + jacksonVersion
    api "ch.qos.logback:logback-classic:1.2.11"

    implementation "org.slf4j:slf4j-api:1.7.36"
    implementation "org.codehaus.janino:janino:3.1.7"
    implementation "org.thymeleaf:thymeleaf:3.0.15.RELEASE"
    implementation "org.graalvm.sdk:graal-sdk:22.1.0"

    testImplementation "junit:junit:4.13.2"
    testImplementation "org.hamcrest:hamcrest-core:2.2"
    testImplementation "org.hamcrest:hamcrest-library:2.2"

    testImplementation "org.mockito:mockito-core:4.5.1"
    testImplementation("com.github.stefanbirkner:system-rules:1.19.0") {
        exclude group: 'junit', module: 'junit-dep'
    }

    testImplementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    testImplementation("org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}")
    testImplementation("org.apache.tomcat.embed:tomcat-embed-el:${tomcatVersion}")
    testImplementation("org.apache.tomcat.embed:tomcat-embed-websocket:${tomcatVersion}")
    testImplementation("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
    testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'com.fasterxml.jackson.core' && details.requested.name == 'jackson-databind') {
            details.useVersion "2.13.2.2"
            details.because 'Enforce databind version'
        }
    }
}

application {
    mainClass.set("de.otto.jlineup.core.Main")
}

test {
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }
    maxHeapSize = "1024m"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

tasks.processResources.doLast { task ->
    def resourcesDir = project.sourceSets.main.output.resourcesDir
    resourcesDir.mkdirs()

    def versionProperties = new File(resourcesDir, "version.properties")
    if (versionProperties) {
        def gitVersion = runCommand("git log -n1 --format=format:%H")
        def fullVersion = version
        versionProperties.text =
                "\njlineup.commit = ${gitVersion}\n" +
                        "\njlineup.version = ${fullVersion}\n" +
                        "\nedison.status.vcs.commit = ${gitVersion}\n" +
                        "\nedison.status.vcs.version = ${fullVersion}\n"

    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'jlineup-core'
            from components.java
            artifact sourcesJar
            artifact javadocJar
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'JLineup Core'
                description = 'The core module of JLineup'
                url = 'https://github.com/otto-de/jlineup'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'MediaMarco'
                        name = 'Marco Geweke'
                        email = 'marco.geweke@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git@github.com:otto-de/jlineup.git'
                    developerConnection = 'scm:git@github.com:otto-de/jlineup.git'
                    url = 'https://github.com/otto-de/jlineup'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            if (project.debugUpload) {
                releasesRepoUrl = "$buildDir/repos/releases"
                snapshotsRepoUrl = "$buildDir/repos/snapshots"
            } else {
                credentials {
                    username = sonatypeUsername
                    password = sonatypePassword
                }
            }
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

targetCompatibility = JavaVersion.VERSION_1_8
sourceCompatibility = JavaVersion.VERSION_1_8

project.afterEvaluate {
    tasks.withType(JavaCompile) {
        def version = compat(sourceCompatibility)
        project.logger.info("Configuring $name to use --release $version")
        options.compilerArgs.addAll(['--release', version])
    }
}
